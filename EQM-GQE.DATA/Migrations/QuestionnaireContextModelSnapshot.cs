// <auto-generated />
using System;
using EQM_GQE.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EQM_GQE.DATA.Migrations
{
    [DbContext(typeof(QuestionnaireContext))]
    partial class QuestionnaireContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.BusinessLine", b =>
                {
                    b.Property<long>("BusinessLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation_EN")
                        .HasColumnType("text");

                    b.Property<string>("Abbreviation_FR")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName_EN")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName_FR")
                        .HasColumnType("text");

                    b.HasKey("BusinessLineId");

                    b.ToTable("BusinessLines");
                });

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.DocumentStatus", b =>
                {
                    b.Property<long>("DocumentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DocumentStatus_EN")
                        .HasColumnType("text");

                    b.Property<string>("DocumentStatus_FR")
                        .HasColumnType("text");

                    b.HasKey("DocumentStatusId");

                    b.ToTable("DocumentStatus");
                });

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.DocumentType", b =>
                {
                    b.Property<long>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DocumentType_EN")
                        .HasColumnType("text");

                    b.Property<string>("DocumentType_FR")
                        .HasColumnType("text");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.Questionnaire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("BusinessLineId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChangeSummary")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DocumentStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("text");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("OrganisationAccessibility")
                        .HasColumnType("boolean");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecurityClassificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Template")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessLineId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("SecurityClassificationId");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.SecurityClassification", b =>
                {
                    b.Property<long>("SecurityClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SecurityClassification_EN")
                        .HasColumnType("text");

                    b.Property<string>("SecurityClassification_FR")
                        .HasColumnType("text");

                    b.HasKey("SecurityClassificationId");

                    b.ToTable("SecurityClassifications");
                });

            modelBuilder.Entity("EQM_GQE.SHARED_RESOURCES.Models.Questionnaire", b =>
                {
                    b.HasOne("EQM_GQE.SHARED_RESOURCES.Models.BusinessLine", "BusinessLine")
                        .WithMany()
                        .HasForeignKey("BusinessLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EQM_GQE.SHARED_RESOURCES.Models.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EQM_GQE.SHARED_RESOURCES.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EQM_GQE.SHARED_RESOURCES.Models.SecurityClassification", "SecurityClassification")
                        .WithMany()
                        .HasForeignKey("SecurityClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessLine");

                    b.Navigation("DocumentStatus");

                    b.Navigation("DocumentType");

                    b.Navigation("SecurityClassification");
                });
#pragma warning restore 612, 618
        }
    }
}
